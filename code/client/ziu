#!/usr/bin/env perl
use v5.22;
use IO::Socket::INET;
use File::Slurp;

# print manual and exit if first argument suggests it
say join '', <DATA> and exit 0 if (shift =~ /^(-h|--help)$/);
 
# auto-flush on socket
$| = 1;

# user running this script
my $username = getpwuid( $< );

# session cookie
my $cookie = "/tmp/ziu_session_$username.txt";

# create a connecting socket
my $socket = new IO::Socket::INET (
    PeerHost    => '127.0.0.1',
    PeerPort    => '7777',
    Proto       => 'tcp',
);
die "cannot connect to the server $!\n" unless $socket;

# if old session exists load it, otherwise session is zero
my $session_id = '00000000000000000000';
if ( -e $cookie ) {
    $session_id = read_file( $cookie ) ;
}
 
# send data in ARGV to server with session-id attached
print $socket $session_id . ' ' . join ' ', @ARGV;
 
# notify server that request has been sent
shutdown($socket, 1);
 
# receive a response of up to 1024 characters from server
my $response = '';
sysread( $socket, $response, 1024);

# close connection, we don't need it from here on
$socket->close();

# cut away session-id from response, so that whe just have the answer
if ($response =~ /^(\S*)\s(.*)$/s) {
    $session_id = $1;
    $response   = $2;
}
else {
    say "Problem in Answer";
}

# give response from server to stdout
say $response;

# need to fix this buggy http in the session :-)
unless ($session_id =~ /http/i) {
    # save session-id in file, for later connections
    open(my $fh, '>', $cookie);
    print $fh $session_id;
    close $fh;
}
 
# Some helpfull links on how to write a TCP application #
#########################################################
# http://xmodulo.com/how-to-write-simple-tcp-server-and-client-in-perl.html
# https://metacpan.org/pod/IO::Socket::INET
# https://metacpan.org/pod/IO::Socket::SSL

=pod

=encoding UTF-8

=head1 NAME

B<ziu> - terminal client for the C<Fulla> server.

This module is part of the C<Fulla> project.

=head1 SYNOPSIS

To start the client in the terminal, just type

 ziu

C<ziu> takes any arguments, attaches a session-id and sends this as a request to the C<Fulla> server.
 
=head1 COMMANDS
 
Use argument C<--help> for command details.
 
=head1 AUTHOR
 
© Boris Däppen, Biel, 2017-2019

=cut

__END__
AUFRUF
       Die  folgenden Kommandos können dem Programm ziu als Argu‐
       mente mitgegeben werden:

       login USER PW
           Eröffnen einer Session.
           Ohne Session können keine andere  Kommandos  verwendet
           werden.

       register USER PW
           Erstellt einen neuen Applikationsbenutzer.

       logout
           Beenden der aktuellen Session.

       ping
           Schickt eine Testnachricht an den Server.

       artikel [MUSTER]
           Gibt  eine  Liste  von Artikeln zurück welche optional
           MUSTER im Namen enthalten.

       neuerartikel NAME ANZAHL PREIS
           Erstell einen neuen Artikel in der Datenbank.

       loescheartikel ID
           Löscht  einen  Artikel  aus  der  Datenbank.  Achtung:
           Löscht  nur, wenn keine anderen Tabellen-Einträge
           referenziert werden,  also  noch  keine  Käufe  auf
           dem Artikel gemacht wurden.

       list [OPTIONEN]
           Zeigt Dateien im Heimverzeichnis an.
           Akzeptiert alle OPTIONEN des Linux-Kommandos ls.

       http
           Liefert  Daten zu Artikeln in HTML als HTTP-Anwort. Es
           wird hierfür kein Login benötigt! Ein  gängiger
           Internetbrowser kann so vom Server Daten empfangen.

BEISPIELE
       ziu login hans muster

       ziu ping

       ziu artikel k

KONFIGURATION
       Session-Daten  werden  unter  /tmp/ziu_session_$user.txt
       gespeichert.

AUTOR
       Boris Däppen <bdaeppen.perl@gmail.com>
